#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —É —Ñ–∞–π–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç—É
"""

import os
import codecs
from pathlib import Path

def check_file_encoding(file_path):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É"""
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º–∏
        encodings_to_try = ['utf-8', 'cp1251', 'cp866', 'iso-8859-1']

        for encoding in encodings_to_try:
            try:
                with codecs.open(file_path, 'r', encoding=encoding) as f:
                    content = f.read()
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
                    ukrainian_chars = ['—ñ', '—ó', '—î', '“ë', '–∞', '–±', '–≤', '–≥', '–¥', '–µ', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '—Ä', '—Å', '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—å', '—é', '—è']
                    has_ukrainian = any(char in content.lower() for char in ukrainian_chars)
                    return encoding, has_ukrainian, len(content)
            except UnicodeDecodeError:
                continue

        return None, False, 0
    except Exception as e:
        return f"Error: {e}", False, 0

def scan_project_files():
    """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É"""
    project_root = Path(".")
    files_to_check = [
        '*.py', '*.html', '*.txt', '*.md', '*.bat', '*.sh',
        'kavapro/*.py', 'kavacrm/*.py',
        'kavacrm/templates/**/*.html'
    ]

    print("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –£–ö–†–ê–á–ù–°–¨–ö–ò–• –°–ò–ú–í–û–õ–Ü–í –£ –§–ê–ô–õ–ê–• –ü–†–û–ï–ö–¢–£")
    print("=" * 60)

    files_with_ukrainian = []
    files_with_encoding_issues = []

    for pattern in files_to_check:
        if '**' in pattern:
            # –î–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ—à—É–∫—É
            base_path = Path(pattern.split('/')[0])
            if base_path.exists():
                for file_path in base_path.rglob(pattern.split('/')[-1]):
                    if file_path.is_file():
                        encoding, has_ukrainian, size = check_file_encoding(file_path)
                        if encoding:
                            if has_ukrainian:
                                files_with_ukrainian.append((file_path, encoding, size))
                            if encoding != 'utf-8':
                                files_with_encoding_issues.append((file_path, encoding))
                        else:
                            files_with_encoding_issues.append((file_path, "–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"))
        else:
            # –î–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ—à—É–∫—É
            for file_path in project_root.glob(pattern):
                if file_path.is_file():
                    encoding, has_ukrainian, size = check_file_encoding(file_path)
                    if encoding:
                        if has_ukrainian:
                            files_with_ukrainian.append((file_path, encoding, size))
                        if encoding != 'utf-8':
                            files_with_encoding_issues.append((file_path, encoding))
                    else:
                        files_with_encoding_issues.append((file_path, "–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"))

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –°–ö–ê–ù–£–í–ê–ù–ù–Ø:")
    print(f"–§–∞–π–ª—ñ–≤ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º: {len(files_with_ukrainian)}")
    print(f"–§–∞–π–ª—ñ–≤ –∑ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è: {len(files_with_encoding_issues)}")

    if files_with_ukrainian:
        print(f"\n‚úÖ –§–ê–ô–õ–ò –ó –£–ö–†–ê–á–ù–°–¨–ö–ò–ú –¢–ï–ö–°–¢–û–ú ({len(files_with_ukrainian)}):")
        for file_path, encoding, size in files_with_ukrainian:
            print("15")

    if files_with_encoding_issues:
        print(f"\n‚ö†Ô∏è  –§–ê–ô–õ–ò –ó –ü–†–û–ë–õ–ï–ú–ê–ú–ò –ö–û–î–£–í–ê–ù–ù–Ø ({len(files_with_encoding_issues)}):")
        for file_path, encoding in files_with_encoding_issues:
            print(f"  ‚Ä¢ {file_path} - {encoding}")

        print("
üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –ü–û –í–ò–ü–†–ê–í–õ–ï–ù–ù–Æ:"        print("  1. –ü–µ—Ä–µ—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª–∏ –≤ UTF-8")
        print("  2. –î–æ–¥–∞–π—Ç–µ # -*- coding: utf-8 -*- –≤ Python —Ñ–∞–π–ª–∏")
        print("  3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ UTF-8 –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö")

    print(f"\nüéØ –í–ò–°–ù–û–í–û–ö:")
    if not files_with_encoding_issues and files_with_ukrainian:
        print("‚úÖ –ö–æ–¥—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∫–æ—Ä–µ–∫—Ç–Ω–µ! –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")
    elif files_with_encoding_issues:
        print("‚ö†Ô∏è  –Ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º. –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏.")
    else:
        print("‚ÑπÔ∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º.")

    return len(files_with_encoding_issues) == 0

def convert_to_utf8(file_path, source_encoding):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ñ–∞–π–ª—É –≤ UTF-8"""
    try:
        # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª –∑ –ø–æ—Ç–æ—á–Ω–∏–º –∫–æ–¥—É–≤–∞–Ω–Ω—è–º
        with codecs.open(file_path, 'r', source_encoding) as f:
            content = f.read()

        # –ó–∞–ø–∏—Å—É—î–º–æ –≤ UTF-8
        with codecs.open(file_path, 'w', 'utf-8') as f:
            f.write(content)

        print(f"‚úÖ –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ: {file_path} ({source_encoding} ‚Üí UTF-8)")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó {file_path}: {e}")
        return False

def fix_encoding_issues():
    """–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –∑ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º"""
    print("
üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ü–†–û–ë–õ–ï–ú –ö–û–î–£–í–ê–ù–ù–Ø..."    print("=" * 60)

    project_root = Path(".")
    files_to_check = [
        '*.py', '*.html', '*.txt', '*.md', '*.bat', '*.sh',
        'kavapro/*.py', 'kavacrm/*.py'
    ]

    fixed_count = 0

    for pattern in files_to_check:
        for file_path in project_root.glob(pattern):
            if file_path.is_file():
                encoding, _, _ = check_file_encoding(file_path)
                if encoding and encoding != 'utf-8':
                    if convert_to_utf8(file_path, encoding):
                        fixed_count += 1

    print(f"\n‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {fixed_count}")

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è coding declarations –¥–æ Python —Ñ–∞–π–ª—ñ–≤
    python_files_fixed = 0
    for pattern in ['*.py', 'kavapro/*.py', 'kavacrm/*.py']:
        for file_path in project_root.glob(pattern):
            if file_path.is_file():
                try:
                    with codecs.open(file_path, 'r', 'utf-8') as f:
                        content = f.read()

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ coding declaration
                    if '# -*- coding:' not in content and content.strip():
                        # –î–æ–¥–∞—î–º–æ coding declaration –ø—ñ—Å–ª—è shebang –∞–±–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
                        lines = content.split('\n')
                        if lines and lines[0].startswith('#!'):
                            lines.insert(1, '# -*- coding: utf-8 -*-')
                        else:
                            lines.insert(0, '# -*- coding: utf-8 -*-')

                        new_content = '\n'.join(lines)

                        with codecs.open(file_path, 'w', 'utf-8') as f:
                            f.write(new_content)

                        python_files_fixed += 1
                        print(f"‚úÖ –î–æ–¥–∞–Ω–æ coding declaration: {file_path}")

                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ {file_path}: {e}")

    print(f"\n‚úÖ –î–æ–¥–∞–Ω–æ coding declarations: {python_files_fixed}")

if __name__ == '__main__':
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ UTF-8 –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ
    try:
        import sys
        if hasattr(sys.stdout, 'reconfigure'):
            sys.stdout.reconfigure(encoding='utf-8')
            sys.stderr.reconfigure(encoding='utf-8')
    except:
        pass

    print("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ —Ç–µ—Å—Ç: –ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç!")
    print("–ö–∏—Ä–∏–ª–∏—Ü—è —Ç–µ—Å—Ç: –ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø")
    print()

    # –°–∫–∞–Ω—É—î–º–æ —Ñ–∞–π–ª–∏
    if scan_project_files():
        print("
üéâ –ö–û–î–£–í–ê–ù–ù–Ø –ö–û–†–ï–ö–¢–ù–ï!"    else:
        print("
üîß –í–ò–ü–†–ê–í–õ–Ø–Ñ–ú–û –ü–†–û–ë–õ–ï–ú–ò..."        fix_encoding_issues()

        print("
üîÑ –ü–ï–†–ï–ü–ï–†–ï–í–Ü–†–ö–ê..."        scan_project_files()

    print("
üí° –ü–û–†–ê–î–ò:"    print("‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Ñ–∞–π–ª–∏ –≤ UTF-8")
    print("‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Unicode")
    print("‚Ä¢ –í Python —Ñ–∞–π–ª–∞—Ö –¥–æ–¥–∞–≤–∞–π—Ç–µ # -*- coding: utf-8 -*-")
    print("‚Ä¢ –í —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ chcp 65001")
