#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è KavaCRM
"""

import os
import sys
import subprocess
import importlib
from pathlib import Path

def check_python_version():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó Python"""
    print("üêç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python...")
    version = sys.version_info
    if version.major == 3 and version.minor >= 8:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - –ü–æ—Ç—Ä—ñ–±–Ω–∞ –≤–µ—Ä—Å—ñ—è 3.8+")
        return False

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")

    required_packages = [
        'django',
        'psycopg2',
        'django_redis',
        'celery',
        'django_two_factor_auth',
        'django_otp',
        'qrcode',
        'django_health_check',
        'requests',
        'openai',
        'anthropic',
        'langchain',
        'pgvector',
        'pillow',
        'python_decouple'
    ]

    missing_packages = []

    for package in required_packages:
        try:
            importlib.import_module(package.replace('_', '-'))
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package}")
            missing_packages.append(package)

    if missing_packages:
        print(f"\n‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: {', '.join(missing_packages)}")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –∫–æ–º–∞–Ω–¥–æ—é: pip install -r requirements_production.txt")
        return False

    print("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")
    return True

def check_django_settings():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Django –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    print("\n‚öôÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Django –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...")

    try:
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kavapro.settings')

        import django
        django.setup()

        from django.conf import settings

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ INSTALLED_APPS
        required_apps = [
            'kavacrm',
            'django.contrib.admin',
            'django_otp',
            'two_factor'
        ]

        for app in required_apps:
            if app in settings.INSTALLED_APPS:
                print(f"‚úÖ {app} - –≤ INSTALLED_APPS")
            else:
                print(f"‚ùå {app} - –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ INSTALLED_APPS")
                return False

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SECRET_KEY
        if hasattr(settings, 'SECRET_KEY') and settings.SECRET_KEY:
            if 'django-insecure' in settings.SECRET_KEY:
                print("‚ö†Ô∏è SECRET_KEY –º—ñ—Å—Ç–∏—Ç—å 'django-insecure' - –∑–º—ñ–Ω—ñ—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω")
            else:
                print("‚úÖ SECRET_KEY –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
        else:
            print("‚ùå SECRET_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ DEBUG
        if settings.DEBUG:
            print("‚ö†Ô∏è DEBUG=True - –≤–∏–º–∫–Ω—ñ—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω")
        else:
            print("‚úÖ DEBUG=False")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        db_engine = settings.DATABASES['default']['ENGINE']
        if 'postgresql' in db_engine:
            print("‚úÖ PostgreSQL –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
        elif 'sqlite3' in db_engine:
            print("‚ö†Ô∏è SQLite –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è PostgreSQL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω")
        else:
            print(f"‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –ë–î: {db_engine}")

        print("‚úÖ Django –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ")
        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Django: {e}")
        return False

def check_database_connection():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
    print("\nüóÑÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î...")

    try:
        from django.db import connection
        cursor = connection.cursor()
        cursor.execute("SELECT 1")
        result = cursor.fetchone()
        if result:
            print("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î —É—Å–ø—ñ—à–Ω–µ")
            return True
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î")
            return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î: {e}")
        return False

def check_static_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    print("\nüìÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...")

    try:
        from django.conf import settings
        from django.core.management import execute_from_command_line

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó staticfiles
        static_root = Path(settings.STATIC_ROOT)
        if static_root.exists():
            print(f"‚úÖ STATIC_ROOT —ñ—Å–Ω—É—î: {static_root}")
        else:
            print(f"‚ö†Ô∏è STATIC_ROOT –Ω–µ —ñ—Å–Ω—É—î: {static_root}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤
        if static_root.exists():
            files_count = len(list(static_root.rglob('*')))
            print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {files_count} —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤")

        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤: {e}")
        return False

def check_security_settings():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏"""
    print("\nüîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏...")

    try:
        from django.conf import settings

        checks = [
            ('SECURE_SSL_REDIRECT', getattr(settings, 'SECURE_SSL_REDIRECT', False)),
            ('SECURE_HSTS_SECONDS', getattr(settings, 'SECURE_HSTS_SECONDS', 0)),
            ('SECURE_CONTENT_TYPE_NOSNIFF', getattr(settings, 'SECURE_CONTENT_TYPE_NOSNIFF', False)),
            ('SECURE_BROWSER_XSS_FILTER', getattr(settings, 'SECURE_BROWSER_XSS_FILTER', False)),
            ('X_FRAME_OPTIONS', getattr(settings, 'X_FRAME_OPTIONS', 'DENY')),
        ]

        for setting, value in checks:
            if isinstance(value, bool) and value:
                print(f"‚úÖ {setting}: {value}")
            elif isinstance(value, int) and value > 0:
                print(f"‚úÖ {setting}: {value}")
            elif isinstance(value, str) and value:
                print(f"‚úÖ {setting}: {value}")
            else:
                print(f"‚ö†Ô∏è {setting}: {value}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CSRF trusted origins
        csrf_origins = getattr(settings, 'CSRF_TRUSTED_ORIGINS', [])
        if csrf_origins:
            print(f"‚úÖ CSRF_TRUSTED_ORIGINS –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ: {len(csrf_origins)} –¥–æ–º–µ–Ω—ñ–≤")
        else:
            print("‚ö†Ô∏è CSRF_TRUSTED_ORIGINS –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")

        return True

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–µ–∑–ø–µ–∫–∏: {e}")
        return False

def check_optional_features():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""
    print("\nüîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π...")

    features = [
        ('2FA', 'django_otp', 'two_factor'),
        ('Health checks', 'health_check'),
        ('Redis cache', 'django_redis'),
        ('Celery', 'celery'),
        ('OpenAI', 'openai'),
        ('Anthropic', 'anthropic'),
        ('LangChain', 'langchain'),
        ('PostgreSQL vector', 'pgvector'),
    ]

    for feature, *packages in features:
        available = True
        for package in packages:
            try:
                importlib.import_module(package)
            except ImportError:
                available = False
                break

        if available:
            print(f"‚úÖ {feature} - –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        else:
            print(f"‚ö†Ô∏è {feature} - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")

def generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏"""
    print("\n" + "="*60)
    print("üìã –ó–í–Ü–¢ –ü–†–û –ì–û–¢–û–í–ù–Ü–°–¢–¨ SYST–ï–ú–ò")
    print("="*60)

    checks = [
        ("–í–µ—Ä—Å—ñ—è Python", check_python_version()),
        ("–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ", check_dependencies()),
        ("Django –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", check_django_settings()),
        ("–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î", check_database_connection()),
        ("–°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏", check_static_files()),
        ("–ë–µ–∑–ø–µ–∫–∞", check_security_settings()),
    ]

    passed = 0
    total = len(checks)

    for check_name, result in checks:
        status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ" if result else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ"
        print("25")

        if result:
            passed += 1

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏: {passed}/{total} –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è!")
        return True
    else:
        print("‚ö†Ô∏è –Ñ –ø—Ä–æ–±–ª–µ–º–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø–µ—Ä–µ–¥ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è–º")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ KavaCRM –¥–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è")
    print("="*60)

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –ø—Ä–æ–µ–∫—Ç—É
    project_path = Path(__file__).resolve().parent
    os.chdir(project_path)

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ Python path
    sys.path.insert(0, str(project_path))

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
    success = generate_report()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    check_optional_features()

    print("\n" + "="*60)
    if success:
        print("‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–û –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø")
        print("\n–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
        print("1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (.env —Ñ–∞–π–ª)")
        print("2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –º—ñ–≥—Ä–∞—Ü—ñ—ó: python manage.py migrate")
        print("3. –ó–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏: python manage.py collectstatic")
        print("4. –°—Ç–≤–æ—Ä—ñ—Ç—å —Å—É–ø–µ—Ä–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: python manage.py createsuperuser")
        print("5. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä: python manage.py runserver")
    else:
        print("‚ùå –°–ò–°–¢–ï–ú–ê –ü–û–¢–†–ï–ë–£–Ñ –î–û–ù–ê–õ–ê–ì–û–î–ñ–ï–ù–ù–Ø")
        print("\n–í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–Ω–æ–≤—É")

    return success

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
