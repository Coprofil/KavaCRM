#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó KavaCRM —Å–∏—Å—Ç–µ–º–∏ –ø—ñ—Å–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def run_command(command, description, cwd=None):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    print(f"\nüîß {description}...")
    try:
        result = subprocess.run(
            command,
            shell=True,
            cwd=cwd,
            capture_output=True,
            text=True,
            check=True
        )
        print(f"‚úÖ {description} - —É—Å–ø—ñ—à–Ω–æ")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –ø–æ–º–∏–ª–∫–∞:")
        print(e.stderr)
        return False

def setup_database():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print("\nüóÑÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")

    commands = [
        ("python manage.py makemigrations", "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ–π"),
        ("python manage.py migrate", "–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ–π"),
        ("python manage.py createinitialrevisions", "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–≤—ñ–∑—ñ–π (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)"),
    ]

    for command, description in commands:
        if not run_command(command, description):
            return False

    return True

def setup_static_files():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    print("\nüìÅ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...")

    return run_command("python manage.py collectstatic --noinput", "–ó–±—ñ—Ä —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤")

def setup_admin_user():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("\nüë§ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î —Å—É–ø–µ—Ä–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    result = subprocess.run(
        "python manage.py shell -c \"from django.contrib.auth.models import User; print(User.objects.filter(is_superuser=True).exists())\"",
        shell=True,
        capture_output=True,
        text=True
    )

    if result.returncode == 0 and result.stdout.strip() == 'True':
        print("‚úÖ –°—É–ø–µ—Ä–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î")
        return True

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—É–ø–µ—Ä–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
    print("–õ–æ–≥—ñ–Ω: admin")
    print("Email: admin@kavacrm.com")
    print("–ü–∞—Ä–æ–ª—å: admin123")

    create_command = 'python manage.py shell -c "from django.contrib.auth.models import User; User.objects.create_superuser(\'admin\', \'admin@kavacrm.com\', \'admin123\')"'

    return run_command(create_command, "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—É–ø–µ—Ä–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

def setup_rag_system():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è RAG —Å–∏—Å—Ç–µ–º–∏"""
    print("\nü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è RAG —Å–∏—Å—Ç–µ–º–∏...")

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ RAG –º–æ–¥—É–ª—è
        from kavacrm.rag_system import RAGSystem

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
        rag = RAGSystem()

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        test_doc = {
            'title': '–¢–µ—Å—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç',
            'content': '–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ RAG —Å–∏—Å—Ç–µ–º–∏.',
            'content_type': 'manual',
            'object_id': None,
            'metadata': {'test': True}
        }

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_id = rag.add_document(**test_doc)
        if doc_id:
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–¥–∞–Ω–æ (ID: {doc_id})")

            # –¢–µ—Å—Ç–æ–≤–∏–π –ø–æ—à—É–∫
            results = rag.search("—Ç–µ—Å—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç", limit=5)
            if results:
                print(f"‚úÖ –ü–æ—à—É–∫ –ø—Ä–∞—Ü—é—î: –∑–Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")

            return True
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç")
            return False

    except ImportError:
        print("‚ö†Ô∏è RAG –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó RAG: {e}")
        return False

def setup_initial_data():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
    print("\nüìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
    create_client_command = '''
python manage.py shell -c "
from kavacrm.models import Client
if not Client.objects.filter(name='–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç').exists():
    Client.objects.create(
        name='–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç',
        address='–≤—É–ª. –¢–µ—Å—Ç–æ–≤–∞, 1',
        comment='–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–∏'
    )
    print('–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ')
else:
    print('–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –≤–∂–µ —ñ—Å–Ω—É—î')
"
'''

    return run_command(create_client_command, "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞")

def setup_cron_jobs():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è cron –∑–∞–≤–¥–∞–Ω—å"""
    print("\n‚è∞ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è cron –∑–∞–≤–¥–∞–Ω—å...")

    cron_commands = [
        "0 4 * * * /usr/local/bin/mount-usb-backup.sh",  # –©–æ–¥–µ–Ω–Ω–∏–π –±–µ–∫–∞–ø –æ 04:00
        "0 3 * * * /usr/local/bin/backup-postgresql.sh",  # –ë–µ–∫–∞–ø –ë–î –æ 03:00
        "*/5 * * * * /usr/local/bin/kavacrm-monitor.sh",  # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
        "0 8 * * * curl -s https://yourdomain.com/health/detailed/ | jq -r '.application_stats' | /usr/local/bin/kavacrm-monitor.sh",  # –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç
    ]

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è crontab
    current_crontab = ""
    try:
        result = subprocess.run("crontab -l", shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            current_crontab = result.stdout
    except:
        pass

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    for cron_cmd in cron_commands:
        if cron_cmd not in current_crontab:
            current_crontab += f"\n{cron_cmd}"

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è crontab
    try:
        process = subprocess.Popen('crontab', stdin=subprocess.PIPE, text=True)
        process.communicate(current_crontab)
        if process.returncode == 0:
            print("‚úÖ Cron –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")
            return True
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è cron")
            return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ cron: {e}")
        return False

def setup_services():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
    print("\nüîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤...")

    services = [
        ("kavacrm-monitor.timer", "–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞–π–º–µ—Ä"),
        ("postgresql", "PostgreSQL"),
        ("nginx", "Nginx"),
        ("redis-server", "Redis"),
    ]

    for service, description in services:
        try:
            result = subprocess.run(
                f"sudo systemctl is-enabled {service}",
                shell=True,
                capture_output=True,
                text=True
            )
            if result.returncode == 0:
                print(f"‚úÖ {description} - —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
            else:
                print(f"‚ö†Ô∏è {description} - –Ω–µ —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
        except:
            print(f"‚ö†Ô∏è {description} - —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")

    return True

def test_system():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...")

    # –¢–µ—Å—Ç Django
    if run_command("python manage.py check", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Django –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"):
        print("‚úÖ Django –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–æ—Ä–µ–∫—Ç–Ω–∞")
    else:
        print("‚ùå –ü–æ–º–∏–ª–∫–∏ –≤ Django –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó")
        return False

    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    try:
        from django.conf import settings
        static_url = settings.STATIC_URL
        print(f"‚úÖ –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ: {static_url}")
    except:
        print("‚ö†Ô∏è –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ")

    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø KAVACRM –°–ò–°–¢–ï–ú–ò")
    print("="*60)

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –ø—Ä–æ–µ–∫—Ç—É
    project_path = Path(__file__).resolve().parent
    os.chdir(project_path)

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–ª—è—Ö—É –¥–æ Python path
    sys.path.insert(0, str(project_path))

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Django settings
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kavapro.settings')

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Django
    import django
    django.setup()

    # –ó–∞–ø—É—Å–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    steps = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö", setup_database),
        ("–°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏", setup_static_files),
        ("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", setup_admin_user),
        ("RAG —Å–∏—Å—Ç–µ–º–∞", setup_rag_system),
        ("–ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ", setup_initial_data),
        ("Cron –∑–∞–≤–¥–∞–Ω–Ω—è", setup_cron_jobs),
        ("–°–∏—Å—Ç–µ–º–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏", setup_services),
        ("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è", test_system),
    ]

    success_count = 0

    for step_name, step_func in steps:
        try:
            if step_func():
                success_count += 1
            else:
                print(f"‚ö†Ô∏è –ö—Ä–æ–∫ '{step_name}' –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∫—Ä–æ—Ü—ñ '{step_name}': {e}")

    print("\n" + "="*60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–á: {success_count}/{len(steps)} –∫—Ä–æ–∫—ñ–≤ —É—Å–ø—ñ—à–Ω–æ")

    if success_count == len(steps):
        print("üéâ –°–ò–°–¢–ï–ú–ê –ü–û–í–ù–Ü–°–¢–Æ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–û–í–ê–ù–ê!")
        print("\nüåê –î–æ—Å—Ç—É–ø –¥–æ —Å–∏—Å—Ç–µ–º–∏:")
        print("‚Ä¢ –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å: /secure-admin-panel-2024/")
        print("‚Ä¢ –û—Å–Ω–æ–≤–Ω–∏–π —Å–∞–π—Ç: /")
        print("‚Ä¢ API: /api/")
        print("‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: /health/")
        print("\nüîê –ê–¥–º—ñ–Ω –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ:")
        print("–õ–æ–≥—ñ–Ω: admin")
        print("–ü–∞—Ä–æ–ª—å: admin123")
        print("\n‚ö†Ô∏è –û–ë–û–í'–Ø–ó–ö–û–í–û –ó–ú–Ü–ù–Ü–¢–¨ –ü–ê–†–û–õ–¨ –ü–Ü–°–õ–Ø –ü–ï–†–®–û–ì–û –í–•–û–î–£!")
    else:
        print("‚ö†Ô∏è –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –ó –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø–ú–ò")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤–∏—â–µ —Ç–∞ –≤–∏–ø—Ä–∞–≤—Ç–µ –ø—Ä–æ–±–ª–µ–º–∏")

    return success_count == len(steps)

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
