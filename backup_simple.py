#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∫–∞–ø—É KavaCRM
"""

import os
import shutil
import zipfile
from datetime import datetime
from pathlib import Path

def print_info(message):
    print(f"‚ÑπÔ∏è  {message}")

def print_success(message):
    print(f"‚úÖ {message}")

def print_warning(message):
    print(f"‚ö†Ô∏è  {message}")

def print_error(message):
    print(f"‚ùå {message}")

def create_backup():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É"""
    print("üíæ –°–¢–í–û–†–ï–ù–ù–Ø –ë–ï–ö–ê–ü–£ KAVACRM")
    print("=" * 50)

    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –±–µ–∫–∞–ø—ñ–≤
    backup_dir = Path("backups")
    backup_dir.mkdir(exist_ok=True)

    # –ß–∞—Å–æ–≤–∞ –º—ñ—Ç–∫–∞
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

    backup_files = []

    # 1. –ë–µ–∫–∞–ø –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    print_info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    db_path = Path("db.sqlite3")
    if db_path.exists():
        backup_db = backup_dir / f"kavacrm_db_{timestamp}.sqlite3"
        shutil.copy2(db_path, backup_db)
        backup_files.append(backup_db)
        print_success(f"–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∞: {backup_db.name}")
    else:
        print_warning("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")

    # 2. –ë–µ–∫–∞–ø –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤
    print_info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤...")
    media_dir = Path("media")
    if media_dir.exists() and any(media_dir.iterdir()):
        backup_media = backup_dir / f"kavacrm_media_{timestamp}.zip"
        with zipfile.ZipFile(backup_media, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(media_dir):
                for file in files:
                    file_path = Path(root) / file
                    arcname = file_path.relative_to(media_dir.parent)
                    zipf.write(file_path, arcname)
        backup_files.append(backup_media)
        print_success(f"–ú–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ –∑–∞–∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω—ñ: {backup_media.name}")
    else:
        print_warning("–ú–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ")

    # 3. –ë–µ–∫–∞–ø —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    print_info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
    static_dir = Path("staticfiles")
    if static_dir.exists() and any(static_dir.iterdir()):
        backup_static = backup_dir / f"kavacrm_static_{timestamp}.zip"
        with zipfile.ZipFile(backup_static, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(static_dir):
                for file in files:
                    file_path = Path(root) / file
                    arcname = file_path.relative_to(static_dir.parent)
                    zipf.write(file_path, arcname)
        backup_files.append(backup_static)
        print_success(f"–°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –∑–∞–∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω—ñ: {backup_static.name}")
    else:
        print_warning("–°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ")

    # 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É
    print_info("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É...")
    report_file = backup_dir / f"backup_report_{timestamp}.txt"
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("=== –ó–í–Ü–¢ –ü–†–û –ë–ï–ö–ê–ü KAVACRM ===\n\n")
        f.write(f"–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        f.write("–°–¢–í–û–†–ï–ù–Ü –§–ê–ô–õ–ò:\n")

        total_size = 0
        for backup_file in backup_files:
            if backup_file.exists():
                size_mb = backup_file.stat().st_size / 1024 / 1024
                f.write(".2f")
                total_size += backup_file.stat().st_size

        f.write(f"\n–ó–ê–ì–ê–õ–¨–ù–ò–ô –†–û–ó–ú–Ü–†: {total_size / 1024 / 1024:.2f} MB\n")

    backup_files.append(report_file)
    print_success(f"–ó–≤—ñ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {report_file.name}")

    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 50)
    print("üìã –ü–Ü–î–°–£–ú–û–ö –ë–ï–ö–ê–ü–£")
    print("=" * 50)

    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –±–µ–∫–∞–ø—ñ–≤: {backup_dir.absolute()}")
    print(f"üìä –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {len(backup_files)}")

    for backup_file in backup_files:
        if backup_file.exists():
            size_mb = backup_file.stat().st_size / 1024 / 1024
            print(".2f")

    print_success("üéâ –ë–ï–ö–ê–ü –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!")

    return backup_files

if __name__ == '__main__':
    try:
        create_backup()
    except Exception as e:
        print_error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
